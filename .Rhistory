xlab("Congruent")+
ylab("Reaction Time")
p
p<-ggplot(data=final, aes(x=congruent, y=average_rt_all, fill=operand)) +
geom_bar(position = "dodge", stat="identity")+
scale_color_hue(labels = c("Addition", "Subtraction"))+
xlab("Congruent")+
ylab("Reaction Time")
p
ds$operand
ds %>%
select(operand=="S)
group_by(subid,congruent, operand) %>%
summarise(average_rt = mean(rt, na.rm = TRUE))
final <- sub_rt %>%
group_by(congruent, operand) %>%
summarise(average_rt_all = mean(average_rt), CI = ci(average_rt), n=n())
final
ds %>%
select(operand=="S)%>%
group_by(subid,congruent, operand) %>%
summarise(average_rt = mean(rt, na.rm = TRUE))
final <- sub_rt %>%
group_by(congruent, operand) %>%
summarise(average_rt_all = mean(average_rt), CI = ci(average_rt), n=n())
final
ds %>%
select(operand=="S") %>%
group_by(subid,congruent, operand) %>%
summarise(average_rt = mean(rt, na.rm = TRUE))
ds %>%
filter(operand=="S") %>%
group_by(subid,congruent, operand) %>%
summarise(average_rt = mean(rt, na.rm = TRUE))
final <- sub_rt %>%
group_by(congruent, operand) %>%
summarise(average_rt_all = mean(average_rt), CI = ci(average_rt), n=n())
final
ds %>%
filter(operand=="S") %>%
group_by(subid,congruent,presentation.time) %>%
summarise(average_rt = mean(rt, na.rm = TRUE))
final <- sub_rt %>%
group_by(congruent, presentation.time) %>%
summarise(average_rt_all = mean(average_rt), CI = ci(average_rt), n=n())
ds %>%
filter(operand=="S") %>%
group_by(subid,congruent,presentation.time) %>%
summarise(average_rt = mean(rt, na.rm = TRUE))
final <- ds %>%
group_by(congruent, presentation.time) %>%
summarise(average_rt_all = mean(average_rt), CI = ci(average_rt), n=n())
ds %>%
filter(operand=="S") %>%
group_by(subid,congruent,presentation.time) %>%
summarise(average_rt = mean(rt, na.rm = TRUE))
group_by(congruent, presentation.time) %>%
summarise(average_rt_all = mean(average_rt), CI = ci(average_rt), n=n())
table <-ds %>%
filter(operand=="S") %>%
group_by(subid,congruent,presentation.time) %>%
summarise(average_rt = mean(rt, na.rm = TRUE))
final <- table %>%
group_by(congruent, presentation.time) %>%
summarise(average_rt_all = mean(average_rt), CI = ci(average_rt), n=n())
final
p<-ggplot(data=final, aes(x=congruent, y=average_rt_all, fill=presentation.time)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Congruent")+
ylab("Reaction Time")
p
p<-ggplot(data=final, aes(x=congruent, y=average_rt_all, fill=presentation.time)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Congruent")+
ylab("Reaction Time")+
geom_errorbar(aes(ymin=average_rt_all-CI, ymax=average_rt_all+CI), width=.2, position=position_dodge(.9))
p
colnames(ds)
ds$congruent
table <-ds %>%
filter(operand=="S") %>%
group_by(subid,congruent,presentation.time) %>%
summarise(average_rt = mean(rt, na.rm = TRUE))
final <- table %>%
group_by(congruent, presentation.time) %>%
summarise(average_rt_all = mean(average_rt), CI = ci(average_rt), n=n())
final
table <-ds %>%
filter(operand=="S") %>%
group_by(subid,congruent,presentation.time) %>%
summarise(average_rt = mean(rt, na.rm = TRUE))
group_by(congruent, presentation.time) %>%
summarise(average_rt_all = mean(average_rt), CI = ci(average_rt), n=n())
table <-ds %>%
filter(operand=="S") %>%
group_by(subid,congruent,presentation.time) %>%
summarise(average_rt = mean(rt, na.rm = TRUE)) %>%
group_by(congruent, presentation.time) %>%
summarise(average_rt_all = mean(average_rt), CI = ci(average_rt), n=n())
final
table <-ds %>%
filter(operand=="S") %>%
group_by(subid,congruent,presentation.time) %>%
summarise(average_rt = mean(rt, na.rm = TRUE)) %>%
group_by(congruent, presentation.time) %>%
summarise(average_rt_all = mean(average_rt), CI = ci(average_rt), n=n())
table
table <-ds %>%
filter(operand=="S") %>%
group_by(subid) %>%
summarise(average_rt = mean(rt, na.rm = TRUE)) %>%
group_by(congruent, presentation.time) %>%
summarise(average_rt_all = mean(average_rt), CI = ci(average_rt), n=n())
table <-ds %>%
filter(operand=="S") %>%
group_by(subid,congruent,presentation.time) %>%
summarise(average_rt = mean(rt, na.rm = TRUE)) %>%
group_by(congruent, presentation.time) %>%
summarise(average_rt_all = mean(average_rt), CI = ci(average_rt), n=n())
table
table %>%
group_by(subid, congruent, presentation.time)%>%
summarize(rt = mean(average_rt_all, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes)
table %>%
group_by(congruent, presentation.time)%>%
summarize(rt = mean(average_rt_all, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes)
p<-ggplot(data=final, aes(x=congruent, y=average_rt_all, fill=presentation.time)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Congruent")+
ylab("Reaction Time")+
geom_errorbar(aes(ymin=average_rt_all-CI, ymax=average_rt_all+CI), width=.2, position=position_dodge(.9))
p
table %>%
group_by(congruent, presentation.time)%>%
summarize(rt = mean(average_rt_all, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes)
p<-ggplot(data=table, aes(x=presentation.time, y=rt)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Congruent")+
ylab("Reaction Time")+
geom_errorbar(aes(ymin=average_rt_all-CI, ymax=average_rt_all+CI), width=.2, position=position_dodge(.9))
p
table %>%
group_by(congruent, presentation.time, CI, n,average_rt_all)%>%
summarize(rt = mean(average_rt_all, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes)
p<-ggplot(data=table, aes(x=presentation.time, y=rt)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Congruent")+
ylab("Reaction Time")+
geom_errorbar(aes(ymin=average_rt_all-CI, ymax=average_rt_all+CI), width=.2, position=position_dodge(.9))
p
ds %>%
group_by(congruent, presentation.time)%>%
summarize(rt = mean(rt, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes)
p<-ggplot(data=table, aes(x=presentation.time, y=rt)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Congruent")+
ylab("Reaction Time")+
geom_errorbar(aes(ymin=average_rt_all-CI, ymax=average_rt_all+CI), width=.2, position=position_dodge(.9))
p
ds %>%
filter(operand =="S") %>%
group_by(congruent, presentation.time)%>%
summarize(rt = mean(rt, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes)
p<-ggplot(data=table, aes(x=presentation.time, y=rt)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Congruent")+
ylab("Reaction Time")+
geom_errorbar(aes(ymin=average_rt_all-CI, ymax=average_rt_all+CI), width=.2, position=position_dodge(.9))
p
ds %>%
filter(operand =="S") %>%
group_by(subid, congruent, presentation.time)%>%
summarize(rt = mean(rt, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes) %>%
group_by(presentation.time) %>%
summarise(diff_all = mean(diff), ci = ci(diff), n=n())
p<-ggplot(data=table, aes(x=presentation.time, y=rt)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Congruent")+
ylab("Reaction Time")+
geom_errorbar(aes(ymin=average_rt_all-CI, ymax=average_rt_all+CI), width=.2, position=position_dodge(.9))
p
ds %>%
filter(operand =="S") %>%
group_by(subid, congruent, presentation.time)%>%
summarize(rt = mean(rt, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes) %>%
group_by(presentation.time) %>%
summarise(diff_all = mean(diff), ci = ci(diff), n=n())
p<-ggplot(data=ds, aes(x=presentation.time, y=rt)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Congruent")+
ylab("Reaction Time")+
geom_errorbar(aes(ymin=average_rt_all-CI, ymax=average_rt_all+CI), width=.2, position=position_dodge(.9))
p
ds %>%
filter(operand =="S") %>%
group_by(subid, congruent, presentation.time)%>%
summarize(rt = mean(rt, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes) %>%
group_by(presentation.time) %>%
summarise(diff_all = mean(diff), ci = ci(diff), n=n())
p<-ggplot(data=ds, aes(x=presentation.time, y=diff)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Congruent")+
ylab("Reaction Time")+
geom_errorbar(aes(ymin=average_rt_all-CI, ymax=average_rt_all+CI), width=.2, position=position_dodge(.9))
p
ds %>%
filter(operand =="S") %>%
group_by(subid, congruent, presentation.time)%>%
summarize(rt = mean(rt, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes) %>%
group_by(presentation.time) %>%
summarise(diff_all = mean(diff), ci = ci(diff), n=n())
p<-ggplot(data=ds, aes(x=presentation.time, y=diff)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Congruent")+
ylab("Reaction Time Difference")+
geom_errorbar(aes(ymin=average_rt_all-CI, ymax=average_rt_all+CI), width=.2, position=position_dodge(.9))
p
ds %>%
filter(operand =="S") %>%
group_by(subid, congruent, presentation.time)%>%
summarize(rt = mean(rt, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes) %>%
group_by(presentation.time) %>%
summarise(diff_all = mean(diff), ci = ci(diff), n=n())
p<-ggplot(data=ds, aes(x=presentation.time, y=diff)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Presentation Time")+
ylab("Reaction Time Difference")+
geom_errorbar(aes(ymin=average_rt_all-CI, ymax=average_rt_all+CI), width=.2, position=position_dodge(.9))
p
for_plot <- ds %>%
filter(operand =="S") %>%
group_by(subid, congruent, presentation.time)%>%
summarize(rt = mean(rt, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes) %>%
group_by(presentation.time) %>%
summarise(diff_all = mean(diff), ci = ci(diff), n=n())
p<-ggplot(data=for_plot, aes(x=presentation.time, y=diff)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Presentation Time")+
ylab("Reaction Time Difference")+
geom_errorbar(aes(ymin=average_rt_all-CI, ymax=average_rt_all+CI), width=.2, position=position_dodge(.9))
p
for_plot <- ds %>%
filter(operand =="S") %>%
group_by(subid, congruent, presentation.time)%>%
summarize(rt = mean(rt, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes) %>%
group_by(presentation.time) %>%
summarise(diff_all = mean(diff), ci = ci(diff), n=n())
p<-ggplot(data=for_plot, aes(x=presentation.time, y=diff_all)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Presentation Time")+
ylab("Reaction Time Difference")+
geom_errorbar(aes(ymin=average_rt_all-CI, ymax=average_rt_all+CI), width=.2, position=position_dodge(.9))
p
for_plot <- ds %>%
filter(operand =="S") %>%
group_by(subid, congruent, presentation.time)%>%
summarize(rt = mean(rt, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes) %>%
group_by(presentation.time) %>%
summarise(diff_all = mean(diff), ci = ci(diff), n=n())
p<-ggplot(data=for_plot, aes(x=presentation.time, y=diff_all)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Presentation Time")+
ylab("Reaction Time Difference")+
geom_errorbar(aes(ymin=diff_all-CI, ymax=diff_all+CI), width=.2, position=position_dodge(.9))
p
for_plot <- ds %>%
filter(operand =="S") %>%
group_by(subid, congruent, presentation.time)%>%
summarize(rt = mean(rt, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes) %>%
group_by(presentation.time) %>%
summarise(diff_all = mean(diff), CI = ci(diff), n=n())
p<-ggplot(data=for_plot, aes(x=presentation.time, y=diff_all)) +
geom_bar(position = "dodge", stat="identity")+
xlab("Presentation Time")+
ylab("Reaction Time Difference")+
geom_errorbar(aes(ymin=diff_all-CI, ymax=diff_all+CI), width=.2, position=position_dodge(.9))
p
for_plot <- ds %>%
filter(operand =="S") %>%
group_by(subid, congruent, presentation.time)%>%
summarize(rt = mean(rt, na.rm  = TRUE)) %>%
spread(congruent, rt) %>%
mutate(diff = no - yes) %>%
group_by(presentation.time) %>%
summarise(diff_all = mean(diff), CI = ci(diff), n=n())
p<-ggplot(data=for_plot, aes(x=presentation.time, y=diff_all)) +
geom_bar(position = "dodge", stat="identity")+
ggtitle("Reaction Time Difference by Presentation Time within Subtraction Operand")+
xlab("Presentation Time")+
ylab("Reaction Time Difference")+
geom_errorbar(aes(ymin=diff_all-CI, ymax=diff_all+CI), width=.2, position=position_dodge(.9))
p
rm(ls=ls())
rm(list=ls())
###Data Preparation
setwd("/Users/juliecachia/Desktop/RProjects/Replication Data") #Set working directory
####Load Relevant Libraries and Functions
library(tidyverse)
library(ggplot2)
#install.packages(("umx")) Install this package for Cronbach's alpha calculation
library(umx) #For Cronbach Alpha calculation in exploratory analysis
####Import data
RawData <- read_csv("data.csv")
#### Data exclusion / filtering
RawData <- RawData[3:nrow(RawData),] #Take out 2 first heading rows
colnames(RawData)[colnames(RawData) == "FL_28_DO"] <- "RandOrder" #Rename column representing block randomizer display order for Social Deviancy Aversion and Pattern Deviancy Aversion (was not able to specify this within Qualtrics)
RawData$RandOrder[RawData$RandOrder=="FL_10|FL_24"] <- "PatternDevFirst" #"FL_10|FL_24" means Pattern Deviancy Aversion was presented first
RawData$RandOrder[RawData$RandOrder=="FL_24|FL_10"] <- "SocialDevFirst" #"FL_24|FL_10" means Social Deviancy Aversion was presented first
#Using filter function in tidyverse, exclude participants who failed attention checks: 1) scoring below 6 on first item, and/or 2) not entering "Yes", "yes", or "Yes" into the text field of the second item
PassedACheck1 <- RawData$AttentionCheck1 > 5
PassedACheck2 <- grepl("yes", RawData$AttentionCheck2_8_TEXT, ignore.case=TRUE)
#Filter dataset to obtain only those rows that passed both attention checks
ExcludedData <- filter(RawData, PassedACheck1 & PassedACheck2)
#### Prepare data for analysis - create columns
#Include participant id column so that later I can group_by(id)
ExcludedData <- ExcludedData %>%
mutate(id = row_number())
###Column names for items of relevant variables:
#Pattern Deviancy Items: PatternDevA_1, PatternDevA_2, PatternDevA_3 ... PatternDevE_1, PatternDevE_2, PatternDevE_3
#Social Deviancy Items: SocialDevA_1, SocialDevA_2, SocialDevA_3 ... SocialDevE_1, SocialDevE_2, SocialDevE_3
#Need for Closure Items: NeedForClosure1 ... NeedForClosure15
#Neuroticism Items: Neuroticism_1, Neuroticism_2
#Political Orientation Item: PoliticalOrientation
#Make data tidy
TidyData <- ExcludedData %>%
gather(contains("Dev"), contains("NeedClosure"), contains("Neuroticism"), PoliticalOrientation, key = "Scale", value = "Rating") #Gather all scales into Scales column and all ratings into Rating column
#Turn whole Rating column into numeric
TidyData$Rating <- as.numeric(TidyData$Rating)
#Reverse code Neuroticism_1 by subtracting every value from 6:
TidyData$Rating[TidyData$Scale == "Neuroticism_1"] <- 6 - TidyData$Rating[TidyData$Scale == "Neuroticism_1"]
#Rename all items of a scale (e.g., Neuroticism_1, Neuroticism_2) into single label (e.g., Neuroticism)
TidyData$Scale[startsWith(TidyData$Scale, "Pattern")] <- "PatternDev"
TidyData$Scale[startsWith(TidyData$Scale, "Social")] <- "SocialDev"
TidyData$Scale[startsWith(TidyData$Scale, "NeedClosure")] <- "NeedForClosure"
TidyData$Scale[startsWith(TidyData$Scale, "Neuroticism")] <- "Neuroticism"
#Create final dataframe specifically for the key analysis
OnlyKeyVariables <- TidyData %>%
group_by(id, Scale, RandOrder) %>%
summarise(ScaleMeans = mean(Rating))
#Spread data back out so we have a row for each participant and a column for each variable mean
OnlyKeyColumns <- OnlyKeyVariables %>%
spread(key = Scale, value = ScaleMeans)
OnlyKeyColumns #Output final dataframe
#Conduct linear regression to test whether Pattern Deviancy Aversion predicts Social Deviancy Aversion
KeyAnalysis <- lm(SocialDev ~ PatternDev, data=OnlyKeyColumns)
summary(KeyAnalysis)
ggplot(OnlyKeyColumns, aes(x=PatternDev, y=SocialDev))+
geom_point()+
geom_smooth(method=lm)+
ggtitle("Dependence of Social Deviancy Aversion on Pattern Deviancy Aversion")+
xlab("Pattern Deviancy Aversion")+
ylab("Social Deviancy Aversion")
AdditionalAnalysis <- lm(SocialDev ~ PatternDev + NeedForClosure + Neuroticism + PoliticalOrientation, data=OnlyKeyColumns)  #include 3 covariates
summary(AdditionalAnalysis)
#For this chunk, the package "umx" must be installed.
PatternDev<- ExcludedData[, grepl("Pattern", names(ExcludedData))] #Extract just the pattern deviancy aversion items (each item is a columm)
PatternDev <- data.matrix(PatternDev) #Convert to matrix
CronbachsAlpha <- reliability(cov(PatternDev)) #Calculate alpha
CronbachsAlpha$alpha #Output just alpha
#First, see whether order influences Pattern Deviancy Aversion scores:
t.test(OnlyKeyColumns$PatternDev~OnlyKeyColumns$RandOrder)
#Second, see whether order influences Social Deviancy Aversion scores:
t.test(OnlyKeyColumns$PatternDev~OnlyKeyColumns$RandOrder)
n()
n(TidyData)
View(OnlyKeyColumns)
View(OnlyKeyVariables)
fvs <- read_csv("data/FVS2011-hands.csv")
View(fvs)
colnames(fvs)
justAge <- fvs %>%
group_by(subid) %>%
summarise(age = age)
justAge <- fvs %>%
group_by(subid) %>%
summarise(age = age(1,1))
justAge <- fvs %>%
group_by(subid) %>%
summarise(age = age[1])
ggplot(fvs, aes(x=justAge)) +
geom_histogram()+
ggtitle("Frequency of Age")+
theme(plot.title = element_text(hjust = 0.5))+
xlab("Age")+
ylab("Frequency")
justAge <- fvs %>%
group_by(subid) %>%
summarise(age = age[1])
ggplot(justAge, aes(x=justAge)) +
geom_histogram()+
ggtitle("Frequency of Age")+
theme(plot.title = element_text(hjust = 0.5))+
xlab("Age")+
ylab("Frequency")
justAge <- fvs %>%
group_by(subid) %>%
summarise(age = age[1])
ggplot(justAge) +
geom_histogram()+
ggtitle("Frequency of Age")+
theme(plot.title = element_text(hjust = 0.5))+
xlab("Age")+
ylab("Frequency")
justAge
justAge <- fvs %>%
group_by(subid) %>%
summarise(age = age[1])
ggplot(justAge, aes(x=age)) +
geom_histogram()+
ggtitle("Frequency of Age")+
theme(plot.title = element_text(hjust = 0.5))+
xlab("Age")+
ylab("Frequency")
subinfo <- read_csv("data/sklar_expt6_subinfo_corrected.csv")
d_a <- read_csv("data/sklar_expt6a_corrected.csv")
d_b <- read_csv("data/sklar_expt6b_corrected.csv")
View(d_a)
?bind_rows
tidyDataA<-gather(d_a,subid,rt,"1":"21")
tidyDataB<-gather(d_b,subid,rt,"22":"42")
#d_tidy<-merge(tidyDataA,tidyDataB, all.x=T, all.y=T)
View(tidyDataA)
bind_rows(tidyDataA, tidyDataB)
d_tidy<-merge(tidyDataA,tidyDataB, all.x=T, all.y=T)
b_tidy<-merge(tidyDataA,tidyDataB, all.x=T, all.y=T)
d_tidy <- bind_rows(tidyDataA, tidyDataB)
d_tidy == b_tidy
View(d_tidy)
View(b_tidy)
d_tidy$subid<- as.numeric(d_tidy$subid)
subinfo$subid<- as.numeric(subinfo$subid)
d<-right_join(d_tidy,subinfo,by="subid")
d$presentation.time <- factor(d$presentation.time)
levels(d$operand) <- c("addition","subtraction")
ggplot(d, aes(x=rt)) +
geom_histogram(binwidth=30)+
ggtitle("Frequency of Reaction Time")+
theme(plot.title = element_text(hjust = 0.5))+
xlab("Reaction Time")+
ylab("Frequency")
cor.test(d$subjective.test, d$objective.test)
ds <- d %>%
filter(subjective.test == 0 & objective.test < 0.6) #What to keep
table <-ds %>%
filter(operand=="S") %>%
group_by(subid,congruent,presentation.time) %>%
summarise(average_rt = mean(rt, na.rm = TRUE)) %>%
group_by(congruent, presentation.time) %>%
summarise(average_rt_all = mean(average_rt), CI = ci(average_rt), n=n())
sum(d_tidy$counterbalance==1)
sum(d_tidy$counterbalance==2)
sum(b_tidy$counterbalance==1)
sum(b_tidy$counterbalance==2)
View(d_tidy)
unique(d_tidy$subid)
ggplot(d_tidy, aes(x=subid))+
geom_bar
ggplot(d_tidy, aes(x=subid))+
geom_bar()
View(subinfo)
d <- right_join(d_tidy,subinfo,by="subid")
View(d)
d$presentation.time <- factor(d$presentation.time)
levels(d$operand) <- c("addition","subtraction")
ggplot(d, aes(x=rt)) +
geom_histogram()+
ggtitle("Frequency of Reaction Time")+ #Title plot
theme(plot.title = element_text(hjust = 0.5))+ #Center title
xlab("Reaction Time")+ #Add x label
ylab("Frequency") #Add y label
ggplot(d, aes(x=rt)) +
geom_histogram(binwidth = 0.01)+
ggtitle("Frequency of Reaction Time")+ #Title plot
theme(plot.title = element_text(hjust = 0.5))+ #Center title
xlab("Reaction Time")+ #Add x label
ylab("Frequency") #Add y label
ggplot(d, aes(x=rt)) +
geom_histogram(binwidth = 0.01)+
ggtitle("Frequency of Reaction Time")+ #Title plot
theme(plot.title = element_text(hjust = 0.5))+ #Center title
xlab("Reaction Time")+ #Add x label
ylab("Frequency") #Add y label
